<br>
<h3>NumPy Indexing and Slicing </h3>
<p> Indexing and slicing in NumPy is quite similar to lists indexing. Elements in a NumPy array can be accessed via putting their index number in square brackets. </p>

<br>

<h3>Example: 1D Indexing and Slicing </h3>
<example>

import numpy as np
A = np.array([5, 3, 6, 2, 8])

print(A[2])	# Print the third element in array A
print(A[-1])	# Print the last element in array A
print(A[2:])	# Print all elements after index 2
print(A[::2])	# Print the every other element

</example>

<br> 

<h3>Output</h3>
<example>

6
8
[6 2 8]
[5 6 8]

</example>

<br> 


<h3> Multidimensional Indexing and Slicing </h3>
<p> For multi-dimensional arrays, items can be accessed via a tuple of indices, with the first index in the tuple for the outermost array, the second one for the succeeding array inside, and so on. In the case of 2D arrays, the first index points to the row and the second index to the column.
</p>
<h3> Example: 2D Indexing and Slicing </h3>

<example>


import numpy as np
A = np.array([[1, 4], 
			[2, 4], 
            [3, -1]])

print(A[2], '\n')	# Print the third element in array A
print(A[1:], '\n')	# Print all elements after index 1
print(A[(0,0)], '\n')	# Print first element in the first row
print(A[(1,0)])		# Print first element in the second row


</example>

<br> 

<h3>Output</h3>
<example>

[ 3 -1] 

[[ 2  4]
 [ 3 -1]] 

1 

2

</example>

<br> 

<h3>NumPy Arithmetic</h3>
<p>Methods like add(), subtract(), multiply(), and divide() are some ways to perform element-wise arithmetic operations on NumPy arrays. Note that their input arrays must either be of the same shape or should conform to array broadcasting rules (wherein the smaller array is stretched or “copied” to match the larger array). </p>

<br>


<h3>Example</h3>
<example>


import numpy as np
A = np.arange(9, dtype = np.float_).reshape(3,3)

print ('First array A:')
print(A, '\n')

print ('Second array B:')
B = np.array([10,10,10]) 
print(B, '\n')

print('Addition:')
print(np.add(A, B), '\n')

print('Subtraction:')
print(np.subtract(A, B), '\n')

print('Multiplication:')
print(np.multiply(A, B), '\n')

print('Division:')
print(np.divide(A, B))


</example>

<br> 

<h3>Output</h3>
<example>

First array A:
[[0. 1. 2.]
 [3. 4. 5.]
 [6. 7. 8.]] 

Second array B:
[10 10 10] 

Addition:
[[10. 11. 12.]
 [13. 14. 15.]
 [16. 17. 18.]] 

Subtraction:
[[-10.  -9.  -8.]
 [ -7.  -6.  -5.]
 [ -4.  -3.  -2.]] 

Multiplication:
[[ 0. 10. 20.]
 [30. 40. 50.]
 [60. 70. 80.]] 

Division:
[[0.  0.1 0.2]
 [0.3 0.4 0.5]
 [0.6 0.7 0.8]]

</example>

<br>

<h3> Other NumPy Arithmetic Functions </h3>
<p> The same shape or conform to array broadcasting rule also applies here. </p>

<br>
<img src ="numpytable.jpg" width="800">

<br>
<h3>Example</h3>
<example>


import numpy as np
A = np.array([[5, 3], [6, 2]])
B = np.array([[1, 4], [2, 4]])

print ('First array A:')
print(A, '\n')
print ('Second array B:')
print(B, '\n')

print('Reciprocal of A:')
print(np.reciprocal(A), '\n')

print('Power:')
print(np.power(A, B), '\n')

print('Modulo:')
print(np.mod(A, B), '\n')

print('Matrix Multiplication:')
print(np.matmul(A, B), '\n')

print('Element-wise Multiplication:')
print(np.multiply(A, B))


</example>

<br> 

<h3>Output</h3>
<example>

First array A:
[[5 3]
 [6 2]] 

Second array B:
[[1 4]
 [2 4]] 

Reciprocal of A:
[[0 0]
 [0 0]] 

Power:
[[ 5 81]
 [36 16]] 

Modulo:
[[0 3]
 [0 2]] 

Matrix Multiplication:
[[11 32]
 [10 32]] 

Element-wise Multiplication:
[[ 5 12]
 [12  8]]

</example>

<br>

<h3>Other NumPy Functions</h3>
<br>
<h3>Trigonometric Functions</h3>
<br>
<h3>numpy.sin(x[, out]) = ufunc ‘sin’) </h3>
<p>This mathematical function helps calculate the trigonometric sine for all x(being the array elements). Other trigonometric functions can be calculated as well by changing all “sin” values to either tan, cos, and etc.
</p>

<br>

<h3>Example</h3>
<example>

import numpy as np
import math
 
in_array = [0, math.pi / 2, np.pi / 3, np.pi]
print ("Input array : \n", in_array)
 
Sin_Values = np.sin(in_array)
print ("\nSine values : \n", Sin_Values)


</example>

<br> 

<h3>Output</h3>
<example>
Input array : 
 [0, 1.5707963267948966, 1.0471975511965976, 3.141592653589793]

Sine values : 
 [  0.00000000e+00   1.00000000e+00   8.66025404e-01   1.22464680e-16]

</example>

<br>
<h1>Functions for Rounding</h1>
<p>This mathematical function evenly rounds array elements to the given number of decimals.</p>
<br>
<h3>Input:</h3>
<example>

import numpy as np
 
in_array = [.5, 1.5, 2.5, 3.5, 4.5, 10.1]
print ("Input array : \n", in_array)
 
round_off_values = np.around(in_array)
print ("\nRounded values : \n", round_off_values)
 
 
in_array = [.53, 1.54, .71]
print ("\nInput array : \n", in_array)
 
round_off_values = np.around(in_array)
print ("\nRounded values : \n", round_off_values)
 
in_array = [.5538, 1.33354, .71445]
print ("\nInput array : \n", in_array)
 
round_off_values = np.around(in_array, decimals = 3)
print ("\nRounded values : \n", round_off_values)
</example>

<br>
<h3>Output:</h3>
<example>

Input array : 
 [0.5, 1.5, 2.5, 3.5, 4.5, 10.1]

Rounded values : 
 [  0.   2.   2.   4.   4.  10.]

Input array : 
 [0.53, 1.54, 0.71]

Rounded values : 
 [ 1.  2.  1.]

Input array : 
 [0.5538, 1.33354, 0.71445]

Rounded values : 
 [ 0.554  1.334  0.714]
</example>


<br>
<h3>numpy.round_(arr, decimals = 0, out = None) </h3>
<p>This mathematical function rounds an array to the given number of decimals.</p>

<br>
<h3>Input:</h3>
<example>
import numpy as np
 
in_array = [.5, 1.5, 2.5, 3.5, 4.5, 10.1]
print ("Input array : \n", in_array)
 
round_off_values = np.round_(in_array)
print ("\nRounded values : \n", round_off_values)
 
 
in_array = [.53, 1.54, .71]
print ("\nInput array : \n", in_array)
 
round_off_values = np.round_(in_array)
print ("\nRounded values : \n", round_off_values)
 
in_array = [.5538, 1.33354, .71445]
print ("\nInput array : \n", in_array)
 
round_off_values = np.round_(in_array, decimals = 3)
print ("\nRounded values : \n", round_off_values)
</example>

<br>
<h3>Output:</h3>
<example>
Input array : 
 [0.5, 1.5, 2.5, 3.5, 4.5, 10.1]
 
Rounded values : 
 [  0.   2.   2.   4.   4.  10.]
 
Input array : 
 [0.53, 1.54, 0.71]
 
Rounded values : 
 [ 1.  2.  1.]
 
Input array : 
 [0.5538, 1.33354, 0.71445]
 
Rounded values : 
 [ 0.554  1.334  0.714]
</example>

<br>
<h3>Exponential and Logarithmic Functions</h3>
<p>This mathematical function calculates exponents of all the elements in the input array.</p>

<br>
<h3>Input:</h3>
<example>

import numpy as np
 
in_array = [1, 3, 5]
print ("Input array : ", in_array)
 
out_array = np.exp(in_array)
print ("Output array : ", out_array)
</example>

<br>
<h3>Output:</h3>
<example>
Input array :  [1, 3, 5]
Output array :  [   2.71828183   20.08553692  148.4131591 ]
</example>

<br>
<h3>numpy.log(x[, out] = ufunc ‘log1p’)</h3>
<p>This mathematical function calculates the natural logarithm of x where x belongs to all the input array elements. Natural logarithm log is the inverse of the exp(), so that log(exp(x)) = x. The natural logarithm is log in base e.</p>

<br>
<h3>Input</h3>
<example>
import numpy as np
 
in_array = [1, 3, 5, 2**8]
print ("Input array : ", in_array)
 
out_array = np.log(in_array)
print ("Output array : ", out_array)
 
 
print("\nnp.log(4**4) : ", np.log(4**4))
print("np.log(2**8) : ", np.log(2**8))
</example>

<br>
<h3>Output:</h3>
<example>
Input array :  [1, 3, 5, 256]
Output array :  [ 0.          1.09861229  1.60943791  5.54517744]
 
np.log(4**4) :  5.54517744448
np.log(2**8) :  5.54517744448
</example>

 
<br>
<h3>References</h3>
<p>https://www.tutorialspoint.com/numpy/numpy_array_from_numerical_ranges.htm https://cs231n.github.io/python-numpy-tutorial/#numpy https://www.geeksforgeeks.org/numpy-ndarray/ https://www.geeksforgeeks.org/numpy-mathematical-function/ https://www.tutorialspoint.com/numpy/numpy_arithmetic_operations.htm https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html https://www.tutorialspoint.com/numpy/numpy_matmul.htm</p>




